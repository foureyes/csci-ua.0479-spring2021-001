---
layout: homework
title: "Assignment #5"
---
<style>
.hl {
	background-color: yellow;
}
img {
    border: 1px solid #000;
}

.warning {
    background-color: yellow;
    color: #aa1122;
    font-weight: bold;
}

.hidden {
    display: none;
}

.hintButton {
    color: #7788ff;
    cursor: pointer;
}
</style>
<script>
document.addEventListener('DOMContentLoaded', hideHints);

function hideHints(evt) {
    document.querySelectorAll('.hint').forEach((ele, i) => {
        const div = document.createElement('div');
        div.id = 'hint' + i + 'Button';
        ele.id = 'hint' + i;
        ele.classList.add('hidden');
        div.addEventListener('click', onClick);
        div.textContent = 'Show Hint';
        div.className = 'hintButton';
        ele.parentNode.insertBefore(div, ele);
    });

}

function onClick(evt) {
    const hintId = this.id.replace('Button', '');
    const hint = document.getElementById(hintId);
    hint.classList.toggle('hidden');
    this.textContent = this.textConent === 'Show Hint' ? 'Hide Hint' : 'Show Hint';
}
</script>

# Assignment #5 - Database Design, Joins - Due Thursday, March 5th  at 11pm

In this homework, you'll:

1. "Screen scrape" data from a web site
	* Using `requests` and `BeautifulSoup` to download and parse html
	* Use `merge` to join DataFrames by a key
2. Use an API
3. Install postgres

## Part 1 - Combine Fa20 Course Info with Requirements

```
           ///////|
          /////// |
         ///////  |
        |~~~~~|   |
        |=====|   |
        |  D  |   |
        |  A  |   |
        |  T  |   |
        |  A  |   |
        |  B  |   |
        |  A  |   |
        |  E  |   |
        |     |   '
    jgs |=====| /
        '-----'`
```
[ASCII art source](http://www.oocities.org/spunk1111/school.htm), with modifications

### Prep

In this part of the assignment, you'll work on parsing html with a library and regular expressions to extract course information data. Additionally, you'll use the `merge` function to put together data from two different DataFrames based on key. 

1. Download the [Spring 2020 CS course schedule](https://cs.nyu.edu/dynamic/courses/schedule/?semester=spring_2020) by right-clicking and choosing "Save As". Save this in the root of your project repository; give it a short, but descriptive file name.
2. Download the [course catalog](https://cs.nyu.edu/dynamic/courses/catalog/) by right-clicking and choosing "Save As". Save this in the root of your project repository; give it a short, but descriptive file name.
3. Make sure to install any modules necessary for working with html 
4. Open up the empty notebook, `courses.ipynb` to work on this part of the assignment

### Instructions

#### 1. Read the 2020 course schedule into a DataFrame

* the frame should have the following columns:
	* Number-Section: the course number and section number
	* Name: the name of the course
	* Instructor: the name of the professor
	* Time: the day(s) and time(s) the course meets
	* (once you read in the data, you'll add a couple of rows)
* [here's an image of some sample rows](../resources/img/hw03-courses/courses-rows.png)
* once you've read in your data, break apart the `Number-Section` column into two separate columns: `Number` and `Section`
	* `Number` is something _like_ `CSCI-UA.0480`
	* `Section` is something _like_ `001`
	* __use regular expressions with groups to do this__
	* the `str` accessor method to use is `extract`
	* [check out the end of the regex slides](../slides/python/regex.html) or the [official pandas docs](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.extract.html)
* show:
	* `info` to show the data types and counts
	* the first 5 rows
	* the last 5 rows
	* a random sampling of 5 rows
* hints: you'll have to...
	* read in the html file
	* parse the html
	* pick out /extract the data
	* it's very useful to use your browser's web inspector tools (right-click on element and inspect to see html and parent, sibling, and child elements
	* ‚ö†Ô∏è [see this guide on using web inspector tools for chrome](https://developers.google.com/web/tools/chrome-devtools/dom/)
	* note that in the parsing library we cover in the slides...
	* `select` can be called on an element to find elements within it
	* if a collection of elements is returned, you can index into it
	* if you just one the first nested element, you can dot (`.`) the parent element, and use the name of the nested element next
	* `.text` or `.get_text()` returns all of the text within an element (even nested elements!)
	* pay attention to patterns in data (what _makes_ a course number, what element is a course number usually in?)
	* also helpful to print out elements themselves (without using `.text`) to see what element was actually selected 
	* some example markup and parsing code:

~~~
<section class='container'>
  <div class='row'>
    <p>Course Name: <a href="cs123.html">CS-123<a/></p>
    <p>Alice Ahn</p>
  </div>
  <div class='row'>'
    <p>Course Name: <a href="cs456.html">CS-456</a></p>
    <p>Bob Bernstein</p>
  </div>
</container>
~~~

~~~
# get every element in the section element with class container
# that has the class attribute, row
rows = rom.select('section.container .row')
for row in rows:
    # looping over this selection gives us each div element

    # within each div element, find the paragraphs
    paragraphs = row.select('p')

    # show ALL text in first paragraph in current div
    print(paragraphs[0].text) # on 1st iteration: Coure Name: CS-123

    # dotting an element with a tag name retrieves the
    # first nested element with that tag name
    print(paragraphs[0].a.text) # on 1st iteration: CS-123

    print(paragraphs[1].text) # on 1st iteration: Alice Ahn
~~~

#### 2. Read the 2020 course catalog into a DataFrame

* the frame should have the following columns:
	* Number: the course number 
	* Prereqs: a text description of the prerequisites
	* Points: the number of credits
* [here's an image of some sample rows from another semester](../resources/img/hw03-courses/catalog-rows.png)
* show:
	* `info` to show the data types and counts
	* the first 5 rows
	* the last 5 rows
	* a random sampling of 5 rows
* use a similar parsing strategy as above to read in this DataFrame

#### 3. Put together both DataFrames


* create a new DataFrame by....
* finding a way to show all scheduled classes in spring 2020 along with their points and prereqs
* only show the following columns, in this order:
	* Number: course number
	* Name: course name
	* Instructor: professor's name
	* Time: meeting time
	* Prereqs: course prerequisites
	* Points: number of credits
* hints:
	* use [`pd.merge` to do this](../slides/python/pandas-join-combine.html)
	* `how=left` will keep all rows in the first DataFrame
* can you spot any anomalies or discrepancies?
	* if so, in a markdown cell, describe any problem(s) you see
	* additionally, describe how you might fix them
	* lastly, based on the resulting DataFrame, describe the behavior of `how=left` on these particular DataFrames
	* if you need to see all rows, use `pd.set_option('display.max_rows', 200)`

## Part 2 - Using an API


Find an API that offers data that you're interested in. If you need help finding a data source, [here's a collective list of free APIs](https://github.com/public-apis/public-apis) or check out some additional [sources from our course site](../data-sets.html). Please try to work with an API that uses JSON as its data interchange formatj. 
1. <span class="hl">don't use the tumblr or nytimes api</span> (or _really_, any other data set that we've used in class, üôÅ)
2. (for the next part) write <span class="hl">code that's different from the programs that we've done in class</span> (it's not adequate to simply use class sample code with a different data set üôÖ)

### 1. Write some documentation 

1. Open up the empty notebook, `project.ipynb`, in jupyterlab / jupyter notebook
2. In a markdown cell, describe the API that you've selected
	* what _is_ the data; if it's relevant, also add where the data came from (how it was collected)
	* link to the API's documentation 
	* link to the specific endpoint(s) that you'll be using (you'll have to make at least two requests, which can be multiple requests to the same endpoint, but with different parameters to retrieve multiple "pages" of data, or two requests to different _kinds_ of related data from the same API)
	* if it's a JSON response, describe the keys / general structure (is it a list of objects, is it a single object per API call, etc.)
3. Make a test request to the API
	* <span class="hl">If the API requires a key</span>
		* put that key in a variable clearly named `api_key` 
		* add a comment above the variable saying `TODO: fill api key`... 
		* before you commit, set the variable to an empty string; <span class="hl">you should not have your API keys in the repository</span>
		* I will send out a google form for you to specify your API key... the grader will use this to run your notebook
		* feel free to use a throwaway email account to procure your API key 
		* (note that... typically API keys are in configuration files or environment variables, but to easy the complexity of bootstrapping your projects, we'll use this simple variable based method)
	* describe the parameters that you'll be sending to the API end point (for example, do you have to send a page number? a search tag?)
	* send a request to the API
	* display some of the results (either as parsed json or as the raw response text)... so that the structure can be compared to the documented structure in the previous step

### 2. Retrieve the data, create a DataFrame

1. Make at least two requests to the API "endpoint(s)" and load the data into a DataFrame
	* For example if there's pagination, get at least 2 pages and combine into a single DataFrame
	* Or if there are two endpoints that can be joined using `merge`, requests data from both
2. In a markdown cell, describe what you'd like to use the data for:
	* perhaps you would simply like to clean it up for further analysis later
	* maybe you have a hypothesis that can be backed by some basic data analysis
3. Write code to achieve what you've written out above using the DataFrame you've constructed. The code should contain at least 2 of the following:
	* 1 groupby
	* 1 multi index / hierarchical indexing
	* 1 merge
	* 1 concat or append

In a markdown cell above your code, write out which of the above requirements you're implementing. As you write your code, document your process in an accompanying markdown cell.

## Part 3 - Prepping for Next Homework; Installing Postgres

To prepare for the following homework, please to install postgres, the relational database that we'll be using for the next few weeks. Install links are below:

* MacOS: https://www.postgresql.org/download/macosx/ (Interactive installer by EnterpriseDB)
* Windows 10: https://www.postgresql.org/download/windows/ (Interactive installer by EnterpriseDB)
* Linux: use your distribution's package manager (apt, yum, pacman)

