---
layout: homework
title: "Assignment #2"
---

<style>
img {
    border: 1px solid #000;
}
</style>

# Barcode Generator

## Part 1 - UPC Functions

#### Setup

* [Download upc.py](/csci-ga.1120-fall2017-001/assignments/hw06/upc.py)

#### Write Functions

Create a program that will generate a UPC barcode. In this part, you'll
write some helper functions for your program. (Part 5 will use these
functions to _actually_ generate a barcode based on user input). __We'll
be using UPC-A__, which consists of 12 digits.

It'll be helpful to read up a little bit on UPC barcodes. Some resources 
that you may find useful include:

* [The wikipedia article on UPC](https://en.wikipedia.org/wiki/Universal_Product_Code#Encoding)
* [A page on howstuffworks that has a mapping of numbers to bar widths](http://electronics.howstuffworks.com/gadgets/high-tech-gadgets/upc3.htm)
* [A guide on UPC barcodes from www.adams1.com](http://www.adams1.com/upccode.html)

In this part, implement the following two functions as specified in the 
docstrings in <code>upc.py</code>:

1. <code>generate_bar_widths(s)</code>
2. <code>valid_barcode(s)</code>

## Part 2 - Barcode Maker

#### Setup

* [Download barcode_maker.py](/csci-ga.1120-fall2017-001/assignments/hw06/barcode_maker.py)

#### Create a Program That Generates a UPC-A Barcode

Using the <code>turtle</code> module and your <code>upc.py</code>, 
create a program that:

1. Asks the user for a barcode
    * You can use the <code>Screen</code> object's <code>textinput</code> method to ask for a barcode:
    <br>
    <pre><code data-trim contenteditable># Screen object
wn = turtle.Screen()
barcode_number = wn.textinput('barcode', 'Please enter a barcode')
</code></pre>
    * See the [official documentation](https://docs.python.org/3.5/library/turtle.html#turtle.textinput)
2. Checks if the barcode is valid (use the appropriate function from <code>upc.py</code>)
3. Draws a barcode if the barcode entered is valid
    * __writing out the numbers of the barcode is optional__
    * the examples below treat a single width bar as 3 pixels, but you can use whatever dimensions work best for you
    * check out the animated gif for entering a valid barcode
    <br>
    ![valid](/csci-ga.1120-fall2017-001/resources/img/hw02_valid.gif)
4. If the barcode is not valid:
    * asks for another barcode
    * with the text on the prompt displaying an error message
    <br>
    <pre><code data-trim contenteditable># if the previous input was not valid...
barcode_number = wn.textinput('barcode', \
    'NOT A VALID BARCODE\n\nPlease enter another barcode')
</code></pre>
    * check out the animated gif that shows an error message:
    <br>
    ![not valid](/csci-ga.1120-fall2017-001/resources/img/hw02_not_valid.gif)
5. You can try out your barcode by getting a barcode scanning app for your phone!
    * [For iphone, you can try](http://www.igeeksblog.com/best-barcode-qr-code-scanning-apps-for-the-iphone/)
    * [One of these might work if you're on Android](http://www.androidheadlines.com/2015/02/featured-top-10-barcode-qr-scanner-apps-android.html)
    * I used QR Scanner for iPhone in the screenshots below:
    <br>
    ![scan](/csci-ga.1120-fall2017-001/resources/img/hw02_scan_small.png)
    <br>
    ![scan result](/csci-ga.1120-fall2017-001/resources/img/hw02_scan_result_small.png)




{% comment %} 
![valid](../resources/img/hw02_valid.gif)
{% endcomment %} 


